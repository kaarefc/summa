<?xml version="1.0"?>
<project default="all" name="summa-script-core" basedir=".">

    <property name="project.name" value="summa-script-core" />
    <property name="project.version.variant" value=""/>
    <property name="project.version" value="0.0.1${project.version.variant}" />
    <property name="builder" value="mke" />
    <property name="release" value="${project.name}-${project.version}" />

    <!-- Build deps -->
    <property name="project.compiler.version" value="1.6"/>
    <property name="project.ant.version" value="1.7.0"/>

	<!-- Persistent files and directories -->
    <property name="src.dir" value="${basedir}/src/java"/>
    <property name="lib.dir" value="${basedir}/lib"/>
    <property name="test.src.dir" value="${basedir}/src/test"/>

    <!-- Temporary files and directories-->
    <property name="build.dir" value="${basedir}/classes"/>
    <property name="test.build.dir" value="${basedir}/classes_test"/>
    <property name="dist.dir" value="${basedir}/dist"/>
    <property name="doc.dir" value="${basedir}/doc"/>
    <property name="tmp.dir" value="${basedir}/tmp"/>
    <property name="release.src.zip"
              value="${project.name}-${project.version}-src.zip" />

    <!-- Other properties -->
    <property name="compiler" value="modern"/>
    <tstamp>
        <format property="build.time" pattern="MM/dd/yyyy HH:mm"/>
    </tstamp>

    <path id="base.path">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="test.base.path">
        <path refid="base.path" />
        <pathelement location="${build.dir}" />
        <pathelement location="${test.build.dir}" />
        <pathelement location="${test.src.dir}" />
    </path>

    <property name="base" refid="base.path"/>
    <property name="test.base" refid="test.base.path"/>


    <!--
        TARGETS
    -->

    <!-- Ensure we have correct Java and Ant versions -->
    <target name="depends">
        <echo message="Checking Java compiler version is ${project.compiler.version}"/>
        <condition property="hasJava">
            <equals arg1="${project.compiler.version}" arg2="${java.specification.version}"/>
        </condition>
        <fail message="Currently Summa only compiles with Java ${project.compiler.version}. Found Java ${java.specification.version}"
              unless="hasJava"/>

        <echo message="Checking Ant version is atleast ${project.ant.version}"/>
        <condition property="hasAnt">
            <antversion atleast="${project.ant.version}"/>
        </condition>
        <fail message="Currently Summa only compiles with Ant ${project.ant.version}. Found Ant ${ant.version}"
              unless="hasAnt"/>
    </target>

    <target name="prepare" depends="depends">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${test.build.dir}"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${doc.dir}"/>
        <delete dir="${build.dir}/META-INF"/>
    </target>

    <target name="clean">
        <delete dir="${build.dir}"/>
        <delete dir="${test.build.dir}"/>
        <delete dir="${dist.dir}"/>
        <delete dir="${doc.dir}"/>
        <delete dir="${tmp.dir}"/>
    </target>

    <target name="compile" depends="prepare">
        <javac srcdir="${src.dir}" destdir="${build.dir}" encoding="UTF-8"
               compiler="${compiler}" optimize="on" debug="on" >
            <compilerarg value="-Xlint:unchecked"/>
            <classpath  refid="base.path" />
        </javac>
    </target>

    <target name="doc" depends="compile">
        <javadoc
                packagenames="net.sf.summa.*"
                destdir="${doc.dir}"
                author="true"
                version="true"
                access="protected"
                windowtitle="Summa Script Core Module"
                additionalparam="-breakiterator">
            <packageset dir="${src.dir}">
                <include name="net/sf/summa/**"/>
            </packageset>
            <classpath refid="base.path"/>
        </javadoc>
        <property name="prefix" value="${release}"/>
    </target>

    <target name="jar" depends="compile">
        <copy todir="${build.dir}">
            <fileset dir="${src.dir}">
                <include name="META-INF/**/*"/>
                <include name="**/*.js"/>
            </fileset>
        </copy>
        <jar basedir="${build.dir}" compress="true" jarfile="${release}.jar">
            <manifest>
                <attribute name="Build-By" value="mke@statsbiblioteket.dk"/>
                <attribute name="Main-Class"
                           value="net.sf.summa.core.Main"/>
            </manifest>
        </jar>
        <deltree dir="${build.dir}/META-INF"/>
    </target>

    <target name="release" depends="clean, jar, doc, .src.zip">
        <!-- TODO: Insert build num and date like this:
        <replaceregexp file="rep.test" match="\$Id[^\$]*\$" replace="Hello - ${build.time}"/>
        -->
        <property name="prefix" value="${release}"/>
        <zip destfile="${dist.dir}/${release}.zip">
            <zipfileset prefix="${prefix}" file="${release}.jar"/>
            <!--<zipfileset prefix="${prefix}" file="README"/>
            <zipfileset prefix="${prefix}" file="MAINTAINERS"/>
            <zipfileset prefix="${prefix}" file="POLICY"/>
            <zipfileset prefix="${prefix}" file="COPYING"/>
            <zipfileset prefix="${prefix}" file="ChangeLog"/>
            <zipfileset prefix="${prefix}" file="NEWS"/>-->
            <zipfileset prefix="${prefix}/doc" includes="**/*" dir="${doc.dir}"/>
        </zip>
    </target>

    <!-- Depends on the 'jar' target to make
         sure that we copy over any needed XSLTs-->
    <target name="compile-test" depends="jar">
        <javac srcdir="${test.src.dir}" destdir="${test.build.dir}" encoding="UTF-8"
               compiler="${compiler}" optimize="on" debug="on">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath  refid="test.base.path" />
        </javac>
    </target>

    <target name="test">
        <property name="test.formatter" value="plain"/>
        <property name="test.usefile" value="false"/>
        <antcall target=".test.run"/>
    </target>

    <target name="test.xml">
        <property name="test.formatter" value="xml"/>
        <property name="test.usefile" value="true"/>
        <antcall target=".test.run"/>
    </target>

    <!-- Only run this target indirectly via the test or test.xml targets
         It needs the test.formatter and test.usefile properties to be set -->
    <target name=".test.run" depends="compile-test">
        <!-- We need to fork the JVM and set the java.class.path property
             to be able to pick resources from the classpath up (like
             resource bundles). JUnit will override the classpath. -->
        <junit printsummary="withOutAndErr" haltonfailure="yes"
               haltonerror="yes" fork="yes" maxmemory="512m">
            <sysproperty key="java.class.path" value="${test.base}"/>
            <classpath refid="test.base.path" />
            <formatter type="${test.formatter}" usefile="${test.usefile}" />

            <!-- add tests here -->
            <test name="dk.statsbiblioteket.util.CachedCollatorTest" />
            <test name="dk.statsbiblioteket.util.ChecksumsTest" />
            <test name="dk.statsbiblioteket.util.FilesTest" />
            <test name="dk.statsbiblioteket.util.I18nTest" />
            <test name="dk.statsbiblioteket.util.i18n.EscapeUTF8StreamTest" />
            <!-- LineReader tests temporarily disabled. See bug 1183:
                 https://gforge.statsbiblioteket.dk/tracker/index.php?func=detail&aid=1183&group_id=9&atid=137-->
            <test name="dk.statsbiblioteket.util.LineReaderTest" />
            <test name="dk.statsbiblioteket.util.LogsTest" />
            <test name="dk.statsbiblioteket.util.ProfilerTest" />
            <test name="dk.statsbiblioteket.util.StreamsTest" />
            <test name="dk.statsbiblioteket.util.StringsTest" />
            <test name="dk.statsbiblioteket.util.XPropertiesTest" />
            <test name="dk.statsbiblioteket.util.ZipsTest" />
            <test name="dk.statsbiblioteket.util.watch.FolderWatcherTest" />
            <test name="dk.statsbiblioteket.util.watch.RecursiveFolderWatcherTest" />
            <test name="dk.statsbiblioteket.util.qa.PackageScannerTest" />
            <test name="dk.statsbiblioteket.util.console.FormatterTest" />
            <test name="dk.statsbiblioteket.util.console.ProcessRunnerTest" />
            <test name="dk.statsbiblioteket.util.reader.BaselineReplacerTest" />
            <test name="dk.statsbiblioteket.util.reader.CharSequenceReaderTest" />
            <test name="dk.statsbiblioteket.util.reader.CircularCharBufferTest" />
            <test name="dk.statsbiblioteket.util.reader.ReplaceFactoryTest" />
            <test name="dk.statsbiblioteket.util.reader.ReplacerTest" />
            <test name="dk.statsbiblioteket.util.reader.StringReplacerTest" />
            <test name="dk.statsbiblioteket.util.rpc.RMIConnectionManagerTest" />
            <test name="dk.statsbiblioteket.util.rpc.StaticConnectionManagerTest" />
            <test name="dk.statsbiblioteket.util.xml.DOMSelectTest" />
            <test name="dk.statsbiblioteket.util.xml.XPathSelectorImplTest" />
            <test name="dk.statsbiblioteket.util.xml.XMLUtilTest" />
            <test name="dk.statsbiblioteket.util.xml.XSLTTest" />
        </junit>
    </target>


    <target name=".src.zip" depends="prepare">
        <property name="prefix" value="${release}"/>
        <zip destfile="${release.src.zip}">
            <zipfileset prefix="${prefix}/src" dir="${src.dir}"/>
            <zipfileset prefix="${prefix}/lib" dir="${lib.dir}"/>
            <zipfileset prefix="${prefix}/test" dir="${test.src.dir}"/>
            <zipfileset prefix="${prefix}" file="build.xml"/>
            <zipfileset prefix="${prefix}" file="LOGGING"/>
            <zipfileset prefix="${prefix}" file="README"/>
            <zipfileset prefix="${prefix}" file="MAINTAINERS"/>
            <zipfileset prefix="${prefix}" file="POLICY"/>
            <zipfileset prefix="${prefix}" file="COPYING"/>
            <zipfileset prefix="${prefix}" file="ChangeLog"/>
            <zipfileset prefix="${prefix}" file="NEWS"/>
            <zipfileset prefix="${prefix}" file="sbutil.iml"/>
            <zipfileset prefix="${prefix}" file="sbutil.ipr"/>
        </zip>
    </target>    

    <target name="all" depends="release"/>
</project>
