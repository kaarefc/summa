2009-01-09: Summa 1.2
---------------------
 
 * Add a new mode to the FacetManipulator doing blazingly fast batch updates.
   This startegy will be used by default when doing consolidates   
 
 * Add an optional skip updates to the facet builder, making it
   possible to postpone facet building until commit or consolidate
 
 * Implement a SummaSearcherAggregator facilitating distributed searches
 
 * More intuitive and fail safe configuration of filters by using lists of
   subconfigurations rather than using named subconfigurations and refering to
   them by their names
 
 * Massive speed update(s) in the indexer
   
   - Implement a streaming Lucene document creator instead of
     the old DOM based one
   
   - Use thread local caches in our Analyzers to minimize garbage collection of
     object instantiations
   
   - Fix big bottle neck where we parsed the transliteration rules one time
     for each field in each document!
   
   - Also use thread local caches in our XSLT plugins and make sure we do a
     minimum of string replacements
 
 * Records use lazy gzip compression/decompression of contents as to minimize
   network overhead
 
 * Make MARC multi volume handling work both on the storage level and on the
   ingest level
 
 * Improve update rules for the RecordReader filter
 
 * Improve time granularity in the RecordReader to milliseconds (was seconds)

 * Fix bug where we leaked abandoned iterators in the DatabaseStorage

 * Major overhaul of the Storage API:
   
   - Remove getRecordsFrom()
          
   - Remove getRecordsFromBase()
          
   - Add a QueryOptions paramter all ReadableStorage methods. This
     new parameter is used to control parent/child expansion as well
     as whether to retrieve deleted/indexable records
   
   - Always sort result sets by mtime
 
 * New backends for the database storage as Derby seems to have some problematic
   performance issues:
   
    - PostgresQL
    
    - H2 (the new default)
 
 * Other updates on the database Storage implementations
 
   - Proper connection and statement pooling on all database Storage backends
   
   - The mtime timestamps are now generated by a UniqueTimestampGenerator,
     meaning that all mtimes are now unique. To go finer than the millisecond
     granularity provided by the Java timestamps (System.nanoSeconds() is not
     applicable here) we use a salted timestamp packed in a long
   
   - Two "modes" for the backend implementations of DatabaseStorage are
     supported
     
       o Paging - meaning that only small result sets are queried at a time
       
       o Lazy relation lookups, not doing JOINs on the DB, but looking relations
         up manually
    
   - Added query timings to storage-tool and added a 'dump' comamnd as well
     to do a raw dump of the entire storage or a single base
 
 * Bump internal version of libraries:
 
   - Lucene 2.3.0 -> 2.4.0
   
   - Derby 10.3.1.4 -> 10.4.2.0

 * Add support for the URLRepository class to list repository contents via
   a bundles.list file on the server

 * Create a generic Record generator for use in test scenarios. It can can
   create records with random content based on a few configurable criteria

 * Configuration files can now escape system properties enclosed in
   Ant style braches. Eg. "${user.home}/summa-database"

 * Bundle specs can now contain zero to many <jvmArg> tags that will be added
   verbatim to the command line for the bundle when it is launched

 * Added a bunch of tests cases covering all the metadata formats employed at
   the State and University Library

 * Introduce summa-bundltool, a helper tool used to create and validate
   bundles

 * Optimize the commiting of records to the storage

 * An XML Scema for the Summa Document format used by the indexer

 * Write an XML Schema for the Summa index descriptor format

 * Implement a Workflow module that can execute a generic "workflow" based
   on an XML file. This can be used to implement daemons that reset bases,
   downloads data dumps, starts indexing processes and what not.

 * Fix some tricky namespacing bugs in XMLSplitter

 * Remove hard RMI dependency from shell tools, they now use a generic RPC
   mechanism to talk to the servers

 * The control-shell and client-shell command line tools are now fully
   scriptable. Supplying exatr commands when launching them will also make
   them run the commands and exit. For more info try the 'help exec' command
   added to these tools

 * Lots of work on making the debugging messages in the log files more helpful

 * Make unit tests independent of hardcoded paths such as /tmp

 * Write a tool (doc/summa-doc-tool) that extracts property definitions and
   their documentation from the Java source files. Result can be seen on the
   wiki at: http://wiki.statsbiblioteket.dk/summa/Properties

 * Implement a FilterSequence, a filter that runs through a series of
   child filters

 * Implement a MUXFilter that can mux payloads/records between different
   child-filters based on the record base of the payload

 * Log profiling/statistics information in Filter framework
 
 * Proper retraction of MBeans and remote interfaces when closing a service

 * Solved bug that made the IndexController commit for each Record
 
 * Tonnes and tonnes of bug fixes
