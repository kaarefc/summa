=======================
2009-01-09: Summa 1.2.0
=======================
 
 * Add a new mode to the FacetManipulator doing blazingly fast batch updates.
   This strategy will be used by default when doing consolidates
 
 * Add an optional skipupdates property to the facet builder, making it
   possible to postpone facet building until commit or consolidate
 
 * Implement a SummaSearcherAggregator facilitating distributed searches
 
 * More intuitive and fail safe configuration of filters by using lists of
   subconfigurations rather than using named subconfigurations and refering to
   them by their names
 
 * Massive speed update(s) in the indexer
   
   - Implement a streaming Lucene document creator instead of
     the old DOM based one
   
   - Use thread local caches in our Analyzers to minimize garbage collection of
     object instantiations
   
   - Fix big bottle neck where we parsed the transliteration rules one time
     for each field in each document!
   
   - Also use thread local caches in our XSLT plugins and make sure we do a
     minimum of string replacements
 
 * Records use lazy gzip compression/decompression of contents to minimize
   network overhead
 
 * Make MARC multi volume handling work both on the storage level and on the
   ingest level
 
 * Improve update rules for the RecordReader filter
 
 * Improve time granularity in the RecordReader to milliseconds (was seconds)

 * Fix bug where we leaked abandoned iterators in the DatabaseStorage

 * Major overhaul of the Storage API:
   
   - Remove getRecordsFrom()
          
   - Remove getRecordsFromBase()
          
   - Add a QueryOptions parameter to all ReadableStorage methods. This
     new parameter is used to control parent/child expansion as well
     as whether to retrieve deleted/indexable records
   
   - Always sort result sets by mtime
 
 * New backends for the database storage as Derby seems to have some problematic
   performance issues:
   
    - PostgresQL
    
    - H2 (the new default)
 
 * Other updates on the database Storage implementations
 
   - Proper connection- and statement pooling on all database Storage backends
   
   - All mtime timestamps are now globally uniqye withing the storage.
     To go finer than the millisecond granularity provided by the Java system
     timestamps (System.nanoSeconds() is not applicable here) we use a salted
     timestamp packed in a long
   
   - Two "modes" for the backend implementations of DatabaseStorage are
     supported (the new H2Storage applies both these modes)
     
       o Paging - meaning that only small result sets are queried at a time
       
       o Lazy relation lookups, not doing JOINs on the DB, but looking relations
         up when needed
    
   - Added query timings to storage-tool and added a 'dump' command as well
     to do a raw dump of the entire storage or a single base
 
 * Bump internal version of libraries:
 
   - Lucene 2.3.0 -> 2.4.0
   
   - Derby 10.3.1.4 -> 10.4.2.0

 * Add support for the URLRepository class to list repository contents via
   a bundles.list file on the server

 * Create a generic Record generator for use in test scenarios. It can can
   create records with random content based on a configurable criteria

 * Configuration files can now escape system properties enclosed in
   Ant style brackets. Eg. "${user.home}/summa-database"

 * Bundle specs can now contain zero to many <jvmArg> tags that will be added
   verbatim to the command line for the bundle when it is launched

 * Added a bunch of tests cases covering all the metadata formats employed at
   the State and University Library

 * Introduce summa-bundletool, a command line helper tool used to create and
   validate bundles

 * Optimize the commiting of records to the storage

 * XML Schema for the Summa Document format used by the indexer

 * XML Schema for the Summa index descriptor format

 * Implement a Workflow module that can execute a generic "workflow" based
   on an XML file. This can be used to implement daemons that reset bases,
   downloads data dumps, starts indexing processes and what not.

 * Fix some tricky namespacing bugs in XMLSplitter

 * Remove hard RMI dependency from shell tools, they now use a generic RPC
   mechanism to talk to the servers

 * The control-shell and client-shell command line tools are now fully
   scriptable. Supplying exatr commands when launching them will also make
   them run the commands and exit. For more info try the 'help exec' command
   added to these tools

 * Lots of work on making the debugging messages in the log files more helpful

 * Make unit tests independent of hardcoded paths such as /tmp

 * Write a tool (doc/summa-doc-tool) that extracts property definitions and
   their documentation from the Java source files. Result can be seen on the
   wiki at: http://wiki.statsbiblioteket.dk/summa/Properties

 * Implement a FilterSequence, a filter that runs through a series of
   child filters

 * Implement a MUXFilter that can mux payloads/records between different
   child-filters based on the record base of the payload

 * Log profiling/statistics information in Filter framework
 
 * Proper retraction of MBeans and remote interfaces when closing a service

 * Solved bug that made the IndexController commit for each Record
 
 * Tonnes of bug fixes


=======================
2008-10-31: Summa 1.1.0
=======================

The Summa team is proud to announce the immediate availability of Summa 1.1.

A ton of work has gone into this new release and we are very are confident that
it will pave the way for an interesting time for library search egnines.

With this release Summa has reached a point where it is on feature parity
(but a lot more powerful) than the old Summa we run in production on out
main site statsbiblioteket.dk.

If you are interested in the future development of Summa take a look at
http://wiki.statsbiblioteket.dk/summa/Community/RoadMap which already contains
the roadmap for 1.2 and beyond.

The release code be downloaded in binary or source form from

  http://wiki.statsbiblioteket.dk/summa/Community/Download

It can also be check out from a dedicated SVN tag:

  svn co https://gforge.statsbiblioteket.dk/svn/summa/tags/summa-1.1.0

Here follows a summary of development that has gone into Summa 1.1:

New Features:

 * The whole workflow from ingest, indexation, to facet computation is now
   fully incremental

 * MARC and Aleph handling code has been updated to work with the new
   filter-based ingest model

 * Autostart of Clients and Services. This is currently only enabled in the
   test-client-1 and test-storage-1 bundles

 * Add a method for removing deployed services from a client

 * Introduce a new Workflow module that can execute workflows specified
   in an XML format. At SB we will use this handle special cases where some
   data sources needs to be reset each time updates arrive

 * Add StorageWatcher class that can monitor a storage instance for changes
   to certain bases

 * The Storage API has seen a major overhaul. The old one leake implementation
   details and where not properly extensible by third parties without accessing
   some Summa internals. The new API is void of implementation details can be
   properly extended

 * Implement an AggregatingStorage that aggregates multiple sub-storage
   instances (in a distributed environment) an exposes them as a single
   storage instance

 * Record data is now passes compressed over the wire an uncompressed lazily

 * The DatabaseStorage class now implements parent-child relationsships for
   records (which means that the default storage, DerbyStorage, will too).
   This is used for multi-volume handling and in the future FRBR


Misc:

 * Web service .war files now contain build information (Summa version number)

 * Removed deprecated and outdated code and config files. You can find the old
   code in the attic/ subdirectory in each module

 * storage-tool.sh now supports an 'xslt' switch that can apply an xslt to a
   given record

 * Add 'spec' command to client shell that can display the bundle spec for the
   client or a given service

 * Add 'remove' command to client shell that can remove a deployed service from
   the client

Bugs Fixed:

 * Time stamp granularity in Storage was 1s. The new granularity is 1ms

 * Fixes to 'distclean' targets in a few modules (to do proper build cleanup)

 * Updated base modification time in WriatbleStorage.clearBase()

 * The Client only listed the services deployed during its current JVM session,
   it now lists all services deployed

 * Certain cases where a missing secutiry manager would mess up RMI

 * Lots and lots of lower profile bugs


=======================
2008-09-15: Summa 1.0.0
=======================

 * Minor bug fixes

 * Tweaks to configurations of example bundles

 * Test website displays a message when no facets are found

=======================
2008-09-12: Summa 0.9
=======================

 * Add webservices for Search and Storage

 * Add a small test website

 * Enable facet generation by default

 * Tons of bug fixes

 * Major rename of all configuration properties to used a consistent naming scheme

=======================
2008-09-02: Summa 0.8
=======================

This marks the first milestone towards the stable open source release of Summa.

It is important to note that this is not a stable, or anywhere near production,
release. It is a development snapshot made when we reached a collection of
internally set goals.

The feature set of this release is not much more than what you will find on the
tutorial page at :

      http://wiki.statsbiblioteket.dk/summa/Tutorials/MinimalDeployment0.8.0
